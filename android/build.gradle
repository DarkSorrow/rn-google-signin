buildscript {
  ext.getExtOrDefault = {name, defaultValue ->
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : defaultValue
  }
  ext.getExtOrIntegerDefault = {name, defaultValue ->
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : defaultValue
  }
}

plugins {
  id "com.android.library"
  id "org.jetbrains.kotlin.android"
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.novastera.rngooglesignin"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion", 34)

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion", 21)
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion", 34)
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = "1.8"
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += [
          "src/newarch",
          // This is needed to build Kotlin classes before Java classes
          "src/main/java"
        ]
      } else {
        java.srcDirs += [
          "src/oldarch",
          // This is needed to build Kotlin classes before Java classes
          "src/main/java"
        ]
      }
    }
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion", "1.8.10")
def react_native_version = getExtOrDefault("reactNativeVersion", "0.79.0")

// Read dependency versions from dependencies.json
def dependenciesFile = file("${rootDir}/../dependencies.json")
def dependenciesJson = null
if (dependenciesFile.exists()) {
  dependenciesJson = new groovy.json.JsonSlurper().parseText(dependenciesFile.text)
}

def getGoogleDepVersion = { depName, fallback ->
  if (dependenciesJson != null) {
    return dependenciesJson.dependencies?.googleSignIn?.android?."$depName" ?: fallback
  }
  return fallback
}

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$react_native_version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  // Google Identity Services - versions from dependencies.json
  implementation "com.google.android.gms:play-services-auth:${getGoogleDepVersion('playServicesAuth', '20.7.0')}"
  implementation "androidx.credentials:credentials:${getGoogleDepVersion('credentials', '1.2.2')}"
  implementation "androidx.credentials:credentials-play-services-auth:${getGoogleDepVersion('credentialsPlayServicesAuth', '1.2.2')}"
  implementation "com.google.android.libraries.identity.googleid:googleid:${getGoogleDepVersion('googleId', '1.1.0')}"
}

// Fix task dependency issue
android.libraryVariants.all { variant ->
  def variantName = variant.name.capitalize()
  def generateResValuesTask = project.tasks.findByName("generate${variantName}ResValues")
  def packageResourcesTask = project.tasks.findByName("package${variantName}Resources")
  
  if (generateResValuesTask != null && packageResourcesTask != null) {
    packageResourcesTask.dependsOn(generateResValuesTask)
  }
} 